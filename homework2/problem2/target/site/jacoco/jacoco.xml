<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="problem2"><sessioninfo id="LAPTOP-RPH626EH-3cc6ab34" start="1601267845207" dump="1601267846673"/><sessioninfo id="LAPTOP-RPH626EH-f78e97c6" start="1601267909162" dump="1601267910583"/><sessioninfo id="LAPTOP-RPH626EH-6ca9e36e" start="1601268096417" dump="1601268098126"/><sessioninfo id="LAPTOP-RPH626EH-21cb0b16" start="1601268217462" dump="1601268218952"/><sessioninfo id="LAPTOP-RPH626EH-3393cd72" start="1601285942212" dump="1601285943534"/><sessioninfo id="LAPTOP-RPH626EH-9636cc4f" start="1601288658645" dump="1601288660145"/><sessioninfo id="LAPTOP-RPH626EH-721505c7" start="1601289271516" dump="1601289273001"/><sessioninfo id="LAPTOP-RPH626EH-8fbce44c" start="1601290166054" dump="1601290167416"/><sessioninfo id="LAPTOP-RPH626EH-8f14ee00" start="1601290639536" dump="1601290640908"/><sessioninfo id="LAPTOP-RPH626EH-643ad3dc" start="1601290935792" dump="1601290937202"/><sessioninfo id="LAPTOP-RPH626EH-7a81ced3" start="1601291096207" dump="1601291097589"/><sessioninfo id="LAPTOP-RPH626EH-378aa553" start="1601291874011" dump="1601291875445"/><sessioninfo id="LAPTOP-RPH626EH-a4d9562b" start="1601302260356" dump="1601302261829"/><package name="edu/postech/csed332/homework2"><class name="edu/postech/csed332/homework2/BooleanExpParser$VariableContext" sourcefilename="BooleanExpParser.java"><method name="ID" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="150"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="151"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="154"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="9" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$ExpressionContext" sourcefilename="BooleanExpParser.java"><method name="&lt;init&gt;" desc="(Lorg/antlr/v4/runtime/ParserRuleContext;I)V" line="95"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRuleIndex" desc="()I" line="97"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="99"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="copyFrom" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="101"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="12"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Constant" sourcefilename="Constant.java"><method name="&lt;init&gt;" desc="(Z)V" line="18"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getValue" desc="()Z" line="26"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="vars" desc="()Ljava/util/Set;" line="32"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="38"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="44"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="49"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="19"/><counter type="LINE" missed="1" covered="7"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$BinaryExpContext" sourcefilename="BooleanExpParser.java"><method name="expression" desc="()Ljava/util/List;" line="120"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression" desc="(I)Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="123"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AND" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="125"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="OR" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="126"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="127"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="130"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="24" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="5" covered="2"/><counter type="COMPLEXITY" missed="5" covered="2"/><counter type="METHOD" missed="4" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Negation" sourcefilename="Negation.java"><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/Exp;)V" line="18"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSubexp" desc="()Ledu/postech/csed332/homework2/Exp;" line="28"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="vars" desc="()Ljava/util/Set;" line="34"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="40"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="47"><counter type="INSTRUCTION" missed="0" covered="109"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="72"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="143"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="10"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Variable" sourcefilename="Variable.java"><method name="&lt;init&gt;" desc="(I)V" line="17"><counter type="INSTRUCTION" missed="5" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getIdentifier" desc="()Ljava/lang/Integer;" line="30"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="vars" desc="()Ljava/util/Set;" line="36"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="42"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="48"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="53"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="39"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="9"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Exp" sourcefilename="Exp.java"/><class name="edu/postech/csed332/homework2/Disjunction" sourcefilename="Disjunction.java"><method name="&lt;init&gt;" desc="([Ledu/postech/csed332/homework2/Exp;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSubexps" desc="()Ljava/util/List;" line="27"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="vars" desc="()Ljava/util/Set;" line="33"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="43"><counter type="INSTRUCTION" missed="1" covered="38"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="57"><counter type="INSTRUCTION" missed="5" covered="297"/><counter type="BRANCH" missed="5" covered="41"/><counter type="LINE" missed="1" covered="42"/><counter type="COMPLEXITY" missed="5" covered="19"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="134"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$toString$0" desc="(Ledu/postech/csed332/homework2/Exp;)Ljava/lang/String;" line="134"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="382"/><counter type="BRANCH" missed="6" covered="48"/><counter type="LINE" missed="1" covered="58"/><counter type="COMPLEXITY" missed="6" covered="28"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/ExpParser$2" sourcefilename="ExpParser.java"><method name="&lt;init&gt;" desc="()V" line="29"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitParenExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ParenExpContext;)Ledu/postech/csed332/homework2/Exp;" line="32"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitUnaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$UnaryExpContext;)Ledu/postech/csed332/homework2/Exp;" line="37"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitBinaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$BinaryExpContext;)Ledu/postech/csed332/homework2/Exp;" line="42"><counter type="INSTRUCTION" missed="4" covered="48"/><counter type="BRANCH" missed="1" covered="2"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitConstant" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ConstantContext;)Ledu/postech/csed332/homework2/Exp;" line="54"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitVariable" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$VariableContext;)Ledu/postech/csed332/homework2/Exp;" line="59"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="84"/><counter type="BRANCH" missed="1" covered="2"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/ExpParser$1" sourcefilename="ExpParser.java"><method name="&lt;init&gt;" desc="()V" line="22"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="syntaxError" desc="(Lorg/antlr/v4/runtime/Recognizer;Ljava/lang/Object;IILjava/lang/String;Lorg/antlr/v4/runtime/RecognitionException;)V" line="25"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$ConstantContext" sourcefilename="BooleanExpParser.java"><method name="TRUE" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="106"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FALSE" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="107"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="108"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="111"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="14" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="2"/><counter type="COMPLEXITY" missed="3" covered="2"/><counter type="METHOD" missed="2" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser" sourcefilename="BooleanExpParser.java"><method name="makeRuleNames" desc="()[Ljava/lang/String;" line="24"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeLiteralNames" desc="()[Ljava/lang/String;" line="31"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeSymbolicNames" desc="()[Ljava/lang/String;" line="37"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTokenNames" desc="()[Ljava/lang/String;" line="67"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVocabulary" desc="()Lorg/antlr/v4/runtime/Vocabulary;" line="73"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getGrammarFileName" desc="()Ljava/lang/String;" line="77"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRuleNames" desc="()[Ljava/lang/String;" line="80"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSerializedATN" desc="()Ljava/lang/String;" line="83"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getATN" desc="()Lorg/antlr/v4/runtime/atn/ATN;" line="86"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/antlr/v4/runtime/TokenStream;)V" line="89"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expression" desc="()Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="174"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expression" desc="(I)Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="178"><counter type="INSTRUCTION" missed="44" covered="335"/><counter type="BRANCH" missed="9" covered="17"/><counter type="LINE" missed="6" covered="80"/><counter type="COMPLEXITY" missed="9" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sempred" desc="(Lorg/antlr/v4/runtime/RuleContext;II)Z" line="307"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression_sempred" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;I)Z" line="314"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="3" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="0" covered="85"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="78" covered="526"/><counter type="BRANCH" missed="14" covered="25"/><counter type="LINE" missed="17" covered="108"/><counter type="COMPLEXITY" missed="18" covered="19"/><counter type="METHOD" missed="6" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/ExpParser" sourcefilename="ExpParser.java"><method name="&lt;init&gt;" desc="()V" line="5"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="parse" desc="(Ljava/lang/String;)Ledu/postech/csed332/homework2/Exp;" line="19"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="27"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="1" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpLexer" sourcefilename="BooleanExpLexer.java"><method name="makeRuleNames" desc="()[Ljava/lang/String;" line="30"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeLiteralNames" desc="()[Ljava/lang/String;" line="37"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeSymbolicNames" desc="()[Ljava/lang/String;" line="43"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTokenNames" desc="()[Ljava/lang/String;" line="73"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVocabulary" desc="()Lorg/antlr/v4/runtime/Vocabulary;" line="79"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Lorg/antlr/v4/runtime/CharStream;)V" line="84"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getGrammarFileName" desc="()Ljava/lang/String;" line="89"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRuleNames" desc="()[Ljava/lang/String;" line="92"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSerializedATN" desc="()Ljava/lang/String;" line="95"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getChannelNames" desc="()[Ljava/lang/String;" line="98"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getModeNames" desc="()[Ljava/lang/String;" line="101"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getATN" desc="()Lorg/antlr/v4/runtime/atn/ATN;" line="104"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="0" covered="103"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="16" covered="233"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="8" covered="27"/><counter type="COMPLEXITY" missed="8" covered="9"/><counter type="METHOD" missed="8" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$UnaryExpContext" sourcefilename="BooleanExpParser.java"><method name="NOT" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="137"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression" desc="()Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="139"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="141"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="144"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="15" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="2"/><counter type="COMPLEXITY" missed="3" covered="2"/><counter type="METHOD" missed="2" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Conjunction" sourcefilename="Conjunction.java"><method name="&lt;init&gt;" desc="([Ledu/postech/csed332/homework2/Exp;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSubexps" desc="()Ljava/util/List;" line="27"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="vars" desc="()Ljava/util/Set;" line="33"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="43"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="57"><counter type="INSTRUCTION" missed="0" covered="436"/><counter type="BRANCH" missed="10" covered="68"/><counter type="LINE" missed="0" covered="63"/><counter type="COMPLEXITY" missed="10" covered="30"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="164"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$toString$0" desc="(Ledu/postech/csed332/homework2/Exp;)Ljava/lang/String;" line="164"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="522"/><counter type="BRANCH" missed="11" covered="75"/><counter type="LINE" missed="0" covered="79"/><counter type="COMPLEXITY" missed="11" covered="39"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$ParenExpContext" sourcefilename="BooleanExpParser.java"><method name="LPAREN" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="160"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="RPAREN" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="161"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression" desc="()Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="163"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="165"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="168"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="20" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="4" covered="2"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="3" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpBaseVisitor" sourcefilename="BooleanExpBaseVisitor.java"><method name="&lt;init&gt;" desc="()V" line="13"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitConstant" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ConstantContext;)Ljava/lang/Object;" line="20"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitBinaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$BinaryExpContext;)Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitUnaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$UnaryExpContext;)Ljava/lang/Object;" line="34"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitVariable" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$VariableContext;)Ljava/lang/Object;" line="41"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitParenExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ParenExpContext;)Ljava/lang/Object;" line="48"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="3"/><counter type="LINE" missed="5" covered="1"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="5" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpVisitor" sourcefilename="BooleanExpVisitor.java"/><sourcefile name="Variable.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="2" mb="1" cb="1"/><line nr="19" mi="0" ci="4" mb="0" cb="0"/><line nr="21" mi="5" ci="0" mb="0" cb="0"/><line nr="22" mi="0" ci="1" mb="0" cb="0"/><line nr="30" mi="0" ci="4" mb="0" cb="0"/><line nr="36" mi="0" ci="13" mb="0" cb="0"/><line nr="42" mi="0" ci="7" mb="0" cb="0"/><line nr="48" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="5" covered="39"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="9"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Negation.java"><line nr="18" mi="0" ci="2" mb="0" cb="0"/><line nr="19" mi="0" ci="3" mb="0" cb="0"/><line nr="20" mi="0" ci="1" mb="0" cb="0"/><line nr="28" mi="0" ci="3" mb="0" cb="0"/><line nr="34" mi="0" ci="7" mb="0" cb="0"/><line nr="40" mi="0" ci="4" mb="0" cb="0"/><line nr="41" mi="0" ci="10" mb="0" cb="2"/><line nr="47" mi="0" ci="2" mb="0" cb="0"/><line nr="48" mi="0" ci="4" mb="0" cb="2"/><line nr="49" mi="0" ci="11" mb="0" cb="0"/><line nr="50" mi="0" ci="13" mb="0" cb="0"/><line nr="51" mi="0" ci="8" mb="0" cb="0"/><line nr="52" mi="0" ci="3" mb="0" cb="0"/><line nr="55" mi="0" ci="4" mb="0" cb="2"/><line nr="56" mi="0" ci="11" mb="0" cb="0"/><line nr="57" mi="0" ci="13" mb="0" cb="0"/><line nr="58" mi="0" ci="8" mb="0" cb="0"/><line nr="59" mi="0" ci="3" mb="0" cb="0"/><line nr="62" mi="0" ci="4" mb="0" cb="2"/><line nr="63" mi="0" ci="20" mb="0" cb="0"/><line nr="64" mi="0" ci="3" mb="0" cb="0"/><line nr="67" mi="0" ci="2" mb="0" cb="0"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="143"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="10"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Disjunction.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="4" mb="0" cb="0"/><line nr="19" mi="0" ci="1" mb="0" cb="0"/><line nr="27" mi="0" ci="3" mb="0" cb="0"/><line nr="33" mi="0" ci="4" mb="0" cb="0"/><line nr="34" mi="0" ci="11" mb="0" cb="2"/><line nr="35" mi="0" ci="5" mb="0" cb="0"/><line nr="36" mi="0" ci="1" mb="0" cb="0"/><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="3" mb="0" cb="2"/><line nr="46" mi="0" ci="4" mb="0" cb="0"/><line nr="49" mi="0" ci="7" mb="0" cb="0"/><line nr="50" mi="0" ci="7" mb="0" cb="0"/><line nr="51" mi="1" ci="14" mb="1" cb="3"/><line nr="57" mi="0" ci="6" mb="0" cb="0"/><line nr="58" mi="0" ci="6" mb="0" cb="0"/><line nr="61" mi="0" ci="7" mb="0" cb="4"/><line nr="62" mi="0" ci="3" mb="0" cb="0"/><line nr="64" mi="0" ci="7" mb="0" cb="4"/><line nr="65" mi="0" ci="3" mb="0" cb="0"/><line nr="68" mi="0" ci="3" mb="0" cb="0"/><line nr="69" mi="0" ci="3" mb="0" cb="0"/><line nr="70" mi="0" ci="6" mb="0" cb="2"/><line nr="71" mi="0" ci="2" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="1" cb="3"/><line nr="76" mi="0" ci="5" mb="0" cb="0"/><line nr="78" mi="0" ci="7" mb="1" cb="3"/><line nr="79" mi="0" ci="5" mb="0" cb="0"/><line nr="82" mi="0" ci="3" mb="0" cb="2"/><line nr="83" mi="0" ci="5" mb="0" cb="0"/><line nr="84" mi="0" ci="6" mb="1" cb="1"/><line nr="85" mi="5" ci="0" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="2"/><line nr="89" mi="0" ci="5" mb="0" cb="0"/><line nr="90" mi="0" ci="6" mb="0" cb="2"/><line nr="91" mi="0" ci="5" mb="0" cb="0"/><line nr="96" mi="0" ci="3" mb="0" cb="2"/><line nr="97" mi="0" ci="8" mb="0" cb="0"/><line nr="98" mi="0" ci="8" mb="0" cb="0"/><line nr="99" mi="0" ci="12" mb="1" cb="3"/><line nr="100" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="3" mb="0" cb="2"/><line nr="104" mi="0" ci="8" mb="0" cb="0"/><line nr="105" mi="0" ci="8" mb="0" cb="0"/><line nr="106" mi="0" ci="12" mb="1" cb="3"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="0" ci="6" mb="0" cb="4"/><line nr="113" mi="0" ci="18" mb="0" cb="0"/><line nr="114" mi="0" ci="21" mb="0" cb="0"/><line nr="115" mi="0" ci="9" mb="0" cb="0"/><line nr="117" mi="0" ci="3" mb="0" cb="0"/><line nr="119" mi="0" ci="6" mb="0" cb="4"/><line nr="120" mi="0" ci="18" mb="0" cb="0"/><line nr="121" mi="0" ci="21" mb="0" cb="0"/><line nr="122" mi="0" ci="9" mb="0" cb="0"/><line nr="124" mi="0" ci="3" mb="0" cb="0"/><line nr="127" mi="0" ci="14" mb="0" cb="0"/><line nr="134" mi="0" ci="14" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="382"/><counter type="BRANCH" missed="6" covered="48"/><counter type="LINE" missed="1" covered="58"/><counter type="COMPLEXITY" missed="6" covered="28"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ExpParser.java"><line nr="5" mi="3" ci="0" mb="0" cb="0"/><line nr="19" mi="0" ci="6" mb="0" cb="0"/><line nr="20" mi="0" ci="8" mb="0" cb="0"/><line nr="22" mi="0" ci="8" mb="0" cb="0"/><line nr="25" mi="0" ci="8" mb="0" cb="0"/><line nr="29" mi="0" ci="8" mb="0" cb="0"/><line nr="32" mi="0" ci="6" mb="0" cb="0"/><line nr="37" mi="0" ci="9" mb="0" cb="0"/><line nr="42" mi="0" ci="4" mb="1" cb="2"/><line nr="44" mi="0" ci="22" mb="0" cb="0"/><line nr="46" mi="0" ci="22" mb="0" cb="0"/><line nr="48" mi="4" ci="0" mb="0" cb="0"/><line nr="54" mi="0" ci="8" mb="0" cb="0"/><line nr="59" mi="0" ci="10" mb="0" cb="0"/><line nr="61" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="7" covered="122"/><counter type="BRANCH" missed="1" covered="2"/><counter type="LINE" missed="2" covered="13"/><counter type="COMPLEXITY" missed="2" covered="10"/><counter type="METHOD" missed="1" covered="9"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="Exp.java"/><sourcefile name="BooleanExpLexer.java"><line nr="14" mi="0" ci="3" mb="0" cb="0"/><line nr="17" mi="0" ci="4" mb="0" cb="0"/><line nr="21" mi="0" ci="11" mb="0" cb="0"/><line nr="25" mi="0" ci="7" mb="0" cb="0"/><line nr="30" mi="0" ci="39" mb="0" cb="0"/><line nr="34" mi="0" ci="2" mb="0" cb="0"/><line nr="37" mi="0" ci="35" mb="0" cb="0"/><line nr="41" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="43" mb="0" cb="0"/><line nr="48" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="6" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="58" mi="0" ci="8" mb="0" cb="2"/><line nr="59" mi="0" ci="6" mb="0" cb="0"/><line nr="60" mi="0" ci="4" mb="0" cb="2"/><line nr="61" mi="0" ci="6" mb="0" cb="0"/><line nr="64" mi="0" ci="4" mb="0" cb="2"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="2" ci="0" mb="0" cb="0"/><line nr="79" mi="2" ci="0" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="9" mb="0" cb="0"/><line nr="86" mi="0" ci="1" mb="0" cb="0"/><line nr="89" mi="2" ci="0" mb="0" cb="0"/><line nr="92" mi="2" ci="0" mb="0" cb="0"/><line nr="95" mi="2" ci="0" mb="0" cb="0"/><line nr="98" mi="2" ci="0" mb="0" cb="0"/><line nr="101" mi="2" ci="0" mb="0" cb="0"/><line nr="104" mi="2" ci="0" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="3" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="8" mb="0" cb="2"/><line nr="128" mi="0" ci="10" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="233"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="8" covered="27"/><counter type="COMPLEXITY" missed="8" covered="9"/><counter type="METHOD" missed="8" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanExpVisitor.java"/><sourcefile name="Constant.java"><line nr="18" mi="0" ci="2" mb="0" cb="0"/><line nr="19" mi="0" ci="3" mb="0" cb="0"/><line nr="20" mi="0" ci="1" mb="0" cb="0"/><line nr="26" mi="0" ci="3" mb="0" cb="0"/><line nr="32" mi="0" ci="4" mb="0" cb="0"/><line nr="38" mi="4" ci="0" mb="0" cb="0"/><line nr="44" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="19"/><counter type="LINE" missed="1" covered="7"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanExpBaseVisitor.java"><line nr="13" mi="0" ci="3" mb="0" cb="0"/><line nr="20" mi="4" ci="0" mb="0" cb="0"/><line nr="27" mi="4" ci="0" mb="0" cb="0"/><line nr="34" mi="4" ci="0" mb="0" cb="0"/><line nr="41" mi="4" ci="0" mb="0" cb="0"/><line nr="48" mi="4" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="20" covered="3"/><counter type="LINE" missed="5" covered="1"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="5" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanExpParser.java"><line nr="14" mi="0" ci="3" mb="0" cb="0"/><line nr="17" mi="0" ci="4" mb="0" cb="0"/><line nr="24" mi="0" ci="7" mb="0" cb="0"/><line nr="28" mi="0" ci="2" mb="0" cb="0"/><line nr="31" mi="0" ci="35" mb="0" cb="0"/><line nr="35" mi="0" ci="2" mb="0" cb="0"/><line nr="37" mi="0" ci="43" mb="0" cb="0"/><line nr="42" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="6" mb="0" cb="0"/><line nr="51" mi="0" ci="4" mb="0" cb="0"/><line nr="52" mi="0" ci="8" mb="0" cb="2"/><line nr="53" mi="0" ci="6" mb="0" cb="0"/><line nr="54" mi="0" ci="4" mb="0" cb="2"/><line nr="55" mi="0" ci="6" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="2"/><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="2" ci="0" mb="0" cb="0"/><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="2" ci="0" mb="0" cb="0"/><line nr="80" mi="2" ci="0" mb="0" cb="0"/><line nr="83" mi="2" ci="0" mb="0" cb="0"/><line nr="86" mi="0" ci="2" mb="0" cb="0"/><line nr="89" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="9" mb="0" cb="0"/><line nr="91" mi="0" ci="1" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="1" mb="0" cb="0"/><line nr="97" mi="2" ci="0" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="3" mb="0" cb="0"/><line nr="102" mi="0" ci="1" mb="0" cb="0"/><line nr="106" mi="5" ci="0" mb="0" cb="0"/><line nr="107" mi="5" ci="0" mb="0" cb="0"/><line nr="108" mi="0" ci="6" mb="0" cb="0"/><line nr="111" mi="0" ci="8" mb="1" cb="1"/><line nr="112" mi="4" ci="0" mb="0" cb="0"/><line nr="120" mi="4" ci="0" mb="0" cb="0"/><line nr="123" mi="6" ci="0" mb="0" cb="0"/><line nr="125" mi="5" ci="0" mb="0" cb="0"/><line nr="126" mi="5" ci="0" mb="0" cb="0"/><line nr="127" mi="0" ci="6" mb="0" cb="0"/><line nr="130" mi="0" ci="8" mb="1" cb="1"/><line nr="131" mi="4" ci="0" mb="0" cb="0"/><line nr="137" mi="5" ci="0" mb="0" cb="0"/><line nr="139" mi="6" ci="0" mb="0" cb="0"/><line nr="141" mi="0" ci="6" mb="0" cb="0"/><line nr="144" mi="0" ci="8" mb="1" cb="1"/><line nr="145" mi="4" ci="0" mb="0" cb="0"/><line nr="150" mi="5" ci="0" mb="0" cb="0"/><line nr="151" mi="0" ci="6" mb="0" cb="0"/><line nr="154" mi="0" ci="8" mb="1" cb="1"/><line nr="155" mi="4" ci="0" mb="0" cb="0"/><line nr="160" mi="5" ci="0" mb="0" cb="0"/><line nr="161" mi="5" ci="0" mb="0" cb="0"/><line nr="163" mi="6" ci="0" mb="0" cb="0"/><line nr="165" mi="0" ci="6" mb="0" cb="0"/><line nr="168" mi="0" ci="8" mb="1" cb="1"/><line nr="169" mi="4" ci="0" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="179" mi="0" ci="3" mb="0" cb="0"/><line nr="180" mi="0" ci="7" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="182" mi="0" ci="2" mb="0" cb="0"/><line nr="183" mi="0" ci="6" mb="0" cb="0"/><line nr="187" mi="0" ci="4" mb="0" cb="0"/><line nr="189" mi="0" ci="3" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="191" mi="0" ci="5" mb="1" cb="4"/><line nr="194" mi="0" ci="5" mb="0" cb="0"/><line nr="195" mi="0" ci="3" mb="0" cb="0"/><line nr="196" mi="0" ci="2" mb="0" cb="0"/><line nr="198" mi="0" ci="3" mb="0" cb="0"/><line nr="199" mi="0" ci="6" mb="0" cb="0"/><line nr="200" mi="0" ci="3" mb="0" cb="0"/><line nr="201" mi="0" ci="6" mb="0" cb="0"/><line nr="203" mi="0" ci="1" mb="0" cb="0"/><line nr="206" mi="0" ci="5" mb="0" cb="0"/><line nr="207" mi="0" ci="3" mb="0" cb="0"/><line nr="208" mi="0" ci="2" mb="0" cb="0"/><line nr="209" mi="0" ci="3" mb="0" cb="0"/><line nr="210" mi="0" ci="4" mb="0" cb="0"/><line nr="211" mi="0" ci="3" mb="0" cb="0"/><line nr="212" mi="0" ci="6" mb="0" cb="0"/><line nr="213" mi="0" ci="3" mb="0" cb="0"/><line nr="214" mi="0" ci="4" mb="0" cb="0"/><line nr="216" mi="0" ci="1" mb="0" cb="0"/><line nr="219" mi="0" ci="5" mb="0" cb="0"/><line nr="220" mi="0" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="2" mb="0" cb="0"/><line nr="222" mi="0" ci="3" mb="0" cb="0"/><line nr="223" mi="0" ci="6" mb="0" cb="0"/><line nr="225" mi="0" ci="1" mb="0" cb="0"/><line nr="229" mi="0" ci="5" mb="0" cb="0"/><line nr="230" mi="0" ci="3" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="0"/><line nr="232" mi="0" ci="3" mb="0" cb="0"/><line nr="233" mi="0" ci="7" mb="0" cb="0"/><line nr="234" mi="0" ci="5" mb="0" cb="0"/><line nr="235" mi="0" ci="6" mb="1" cb="3"/><line nr="236" mi="8" ci="0" mb="0" cb="0"/><line nr="239" mi="3" ci="6" mb="1" cb="1"/><line nr="240" mi="0" ci="4" mb="0" cb="0"/><line nr="241" mi="0" ci="3" mb="0" cb="0"/><line nr="244" mi="0" ci="1" mb="0" cb="0"/><line nr="246" mi="5" ci="0" mb="0" cb="0"/><line nr="248" mi="0" ci="7" mb="0" cb="0"/><line nr="249" mi="0" ci="3" mb="0" cb="0"/><line nr="250" mi="0" ci="4" mb="0" cb="0"/><line nr="251" mi="0" ci="10" mb="0" cb="0"/><line nr="252" mi="0" ci="5" mb="1" cb="3"/><line nr="253" mi="0" ci="3" mb="1" cb="1"/><line nr="254" mi="2" ci="3" mb="1" cb="1"/><line nr="255" mi="0" ci="2" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="258" mi="0" ci="4" mb="0" cb="0"/><line nr="259" mi="0" ci="10" mb="1" cb="2"/><line nr="262" mi="0" ci="9" mb="0" cb="0"/><line nr="263" mi="0" ci="4" mb="0" cb="0"/><line nr="264" mi="0" ci="5" mb="0" cb="0"/><line nr="265" mi="0" ci="3" mb="0" cb="0"/><line nr="266" mi="6" ci="6" mb="1" cb="1"/><line nr="267" mi="0" ci="3" mb="0" cb="0"/><line nr="268" mi="0" ci="6" mb="0" cb="0"/><line nr="269" mi="0" ci="3" mb="0" cb="0"/><line nr="270" mi="0" ci="6" mb="0" cb="0"/><line nr="272" mi="0" ci="1" mb="0" cb="0"/><line nr="275" mi="0" ci="9" mb="0" cb="0"/><line nr="276" mi="0" ci="4" mb="0" cb="0"/><line nr="277" mi="0" ci="5" mb="0" cb="0"/><line nr="278" mi="0" ci="3" mb="0" cb="0"/><line nr="279" mi="6" ci="6" mb="1" cb="1"/><line nr="280" mi="0" ci="3" mb="0" cb="0"/><line nr="281" mi="0" ci="6" mb="0" cb="0"/><line nr="282" mi="0" ci="3" mb="0" cb="0"/><line nr="283" mi="0" ci="6" mb="0" cb="0"/><line nr="289" mi="0" ci="3" mb="0" cb="0"/><line nr="290" mi="0" ci="4" mb="0" cb="0"/><line nr="291" mi="0" ci="11" mb="0" cb="0"/><line nr="295" mi="1" ci="0" mb="0" cb="0"/><line nr="296" mi="3" ci="0" mb="0" cb="0"/><line nr="297" mi="5" ci="0" mb="0" cb="0"/><line nr="298" mi="5" ci="0" mb="0" cb="0"/><line nr="301" mi="0" ci="3" mb="0" cb="0"/><line nr="303" mi="0" ci="2" mb="0" cb="0"/><line nr="307" mi="2" ci="0" mb="2" cb="0"/><line nr="309" mi="6" ci="0" mb="0" cb="0"/><line nr="311" mi="2" ci="0" mb="0" cb="0"/><line nr="314" mi="2" ci="0" mb="3" cb="0"/><line nr="316" mi="6" ci="0" mb="0" cb="0"/><line nr="318" mi="6" ci="0" mb="0" cb="0"/><line nr="320" mi="2" ci="0" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="3" mb="0" cb="0"/><line nr="336" mi="0" ci="4" mb="0" cb="0"/><line nr="337" mi="0" ci="8" mb="0" cb="2"/><line nr="338" mi="0" ci="10" mb="0" cb="0"/><line nr="340" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="162" covered="608"/><counter type="BRANCH" missed="19" covered="30"/><counter type="LINE" missed="35" covered="123"/><counter type="COMPLEXITY" missed="36" covered="32"/><counter type="METHOD" missed="19" covered="22"/><counter type="CLASS" missed="0" covered="7"/></sourcefile><sourcefile name="Conjunction.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="4" mb="0" cb="0"/><line nr="19" mi="0" ci="1" mb="0" cb="0"/><line nr="27" mi="0" ci="3" mb="0" cb="0"/><line nr="33" mi="0" ci="4" mb="0" cb="0"/><line nr="34" mi="0" ci="11" mb="0" cb="2"/><line nr="35" mi="0" ci="5" mb="0" cb="0"/><line nr="36" mi="0" ci="1" mb="0" cb="0"/><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="3" mb="0" cb="2"/><line nr="46" mi="0" ci="4" mb="0" cb="0"/><line nr="49" mi="0" ci="7" mb="0" cb="0"/><line nr="50" mi="0" ci="7" mb="0" cb="0"/><line nr="51" mi="0" ci="15" mb="1" cb="3"/><line nr="57" mi="0" ci="6" mb="0" cb="0"/><line nr="58" mi="0" ci="6" mb="0" cb="0"/><line nr="61" mi="0" ci="7" mb="0" cb="4"/><line nr="62" mi="0" ci="3" mb="0" cb="0"/><line nr="64" mi="0" ci="7" mb="0" cb="4"/><line nr="65" mi="0" ci="3" mb="0" cb="0"/><line nr="68" mi="0" ci="3" mb="0" cb="0"/><line nr="69" mi="0" ci="3" mb="0" cb="0"/><line nr="70" mi="0" ci="6" mb="0" cb="2"/><line nr="71" mi="0" ci="2" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="1" cb="3"/><line nr="76" mi="0" ci="5" mb="0" cb="0"/><line nr="78" mi="0" ci="7" mb="1" cb="3"/><line nr="79" mi="0" ci="5" mb="0" cb="0"/><line nr="82" mi="0" ci="3" mb="0" cb="2"/><line nr="83" mi="0" ci="5" mb="0" cb="0"/><line nr="84" mi="0" ci="6" mb="0" cb="2"/><line nr="85" mi="0" ci="5" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="2"/><line nr="89" mi="0" ci="5" mb="0" cb="0"/><line nr="90" mi="0" ci="6" mb="0" cb="2"/><line nr="91" mi="0" ci="5" mb="0" cb="0"/><line nr="96" mi="0" ci="3" mb="0" cb="2"/><line nr="97" mi="0" ci="8" mb="0" cb="0"/><line nr="98" mi="0" ci="8" mb="0" cb="0"/><line nr="99" mi="0" ci="12" mb="0" cb="4"/><line nr="100" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="3" mb="0" cb="2"/><line nr="104" mi="0" ci="8" mb="0" cb="0"/><line nr="105" mi="0" ci="8" mb="0" cb="0"/><line nr="106" mi="0" ci="12" mb="0" cb="4"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="0" ci="6" mb="0" cb="4"/><line nr="113" mi="0" ci="18" mb="0" cb="0"/><line nr="114" mi="0" ci="21" mb="0" cb="0"/><line nr="115" mi="0" ci="9" mb="0" cb="0"/><line nr="117" mi="0" ci="3" mb="0" cb="0"/><line nr="119" mi="0" ci="6" mb="0" cb="4"/><line nr="120" mi="0" ci="18" mb="0" cb="0"/><line nr="121" mi="0" ci="21" mb="0" cb="0"/><line nr="122" mi="0" ci="9" mb="0" cb="0"/><line nr="124" mi="0" ci="3" mb="0" cb="0"/><line nr="128" mi="0" ci="6" mb="0" cb="4"/><line nr="129" mi="0" ci="5" mb="0" cb="0"/><line nr="130" mi="0" ci="7" mb="0" cb="0"/><line nr="131" mi="0" ci="8" mb="1" cb="3"/><line nr="132" mi="0" ci="8" mb="1" cb="1"/><line nr="133" mi="0" ci="5" mb="0" cb="0"/><line nr="136" mi="0" ci="7" mb="0" cb="0"/><line nr="137" mi="0" ci="8" mb="1" cb="3"/><line nr="138" mi="0" ci="8" mb="1" cb="1"/><line nr="139" mi="0" ci="5" mb="0" cb="0"/><line nr="143" mi="0" ci="6" mb="0" cb="4"/><line nr="144" mi="0" ci="5" mb="0" cb="0"/><line nr="145" mi="0" ci="7" mb="0" cb="0"/><line nr="146" mi="0" ci="8" mb="1" cb="3"/><line nr="147" mi="0" ci="8" mb="1" cb="1"/><line nr="148" mi="0" ci="5" mb="0" cb="0"/><line nr="151" mi="0" ci="7" mb="0" cb="0"/><line nr="152" mi="0" ci="8" mb="1" cb="3"/><line nr="153" mi="0" ci="8" mb="1" cb="1"/><line nr="154" mi="0" ci="5" mb="0" cb="0"/><line nr="159" mi="0" ci="14" mb="0" cb="0"/><line nr="164" mi="0" ci="14" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="522"/><counter type="BRANCH" missed="11" covered="75"/><counter type="LINE" missed="0" covered="79"/><counter type="COMPLEXITY" missed="11" covered="39"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="220" covered="2071"/><counter type="BRANCH" missed="38" covered="172"/><counter type="LINE" missed="53" covered="340"/><counter type="COMPLEXITY" missed="70" covered="140"/><counter type="METHOD" missed="34" covered="68"/><counter type="CLASS" missed="0" covered="17"/></package><counter type="INSTRUCTION" missed="220" covered="2071"/><counter type="BRANCH" missed="38" covered="172"/><counter type="LINE" missed="53" covered="340"/><counter type="COMPLEXITY" missed="70" covered="140"/><counter type="METHOD" missed="34" covered="68"/><counter type="CLASS" missed="0" covered="17"/></report>